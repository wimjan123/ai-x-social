# Production-ready full-stack Dockerfile
# Combined frontend and backend in single container for simplified deployment
# Optimized for AI Social Media Platform with security and performance best practices

# Global build arguments
ARG NODE_VERSION=22.12
ARG ALPINE_VERSION=3.20

# Security and build metadata
LABEL maintainer="AI Social Platform Team" \
      description="Full-stack AI-powered social media platform in single container" \
      version="1.0.0" \
      org.opencontainers.image.title="AI Social Full-Stack" \
      org.opencontainers.image.description="Combined frontend and backend with nginx reverse proxy" \
      org.opencontainers.image.vendor="AI Social Platform Team" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/ai-social-platform/full-stack"

# Base stage with hardened Alpine and Node.js
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base

# Security hardening and system dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    tini \
    nginx \
    supervisor \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create secure app users
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs --home /app --shell /bin/false appuser

WORKDIR /app

# Backend dependencies stage
FROM base AS backend-deps
ENV NODE_ENV=production
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false

WORKDIR /app/backend
COPY --chown=appuser:nodejs backend/package*.json ./
COPY --chown=appuser:nodejs backend/prisma ./prisma/

USER appuser
RUN npm ci --only=production --ignore-scripts --no-optional && \
    npm audit fix --audit-level=moderate || true && \
    npm cache clean --force

# Frontend dependencies stage
FROM base AS frontend-deps
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false

WORKDIR /app/frontend
COPY --chown=appuser:nodejs frontend/package*.json ./

USER appuser
RUN npm ci --only=production --ignore-scripts --no-optional && \
    npm audit fix --audit-level=moderate || true && \
    npm cache clean --force

# Backend builder stage
FROM base AS backend-builder
ENV NODE_ENV=production
ENV NPM_CONFIG_UPDATE_NOTIFIER=false

WORKDIR /app/backend
COPY --chown=appuser:nodejs backend/package*.json ./
COPY --chown=appuser:nodejs backend/prisma ./prisma/

USER appuser
RUN npm ci --include=dev --ignore-scripts --no-optional && \
    npm cache clean --force

COPY --chown=appuser:nodejs backend/ .
RUN npx prisma generate && \
    npm run typecheck || echo "Type checking failed, continuing..." && \
    npm run build 2>/dev/null || echo "No build step defined, skipping..." && \
    npm prune --production

# Frontend builder stage
FROM base AS frontend-builder
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NEXT_OPTIMIZE=1

WORKDIR /app/frontend
COPY --chown=appuser:nodejs frontend/package*.json ./

USER appuser
RUN npm ci --include=dev --ignore-scripts --no-optional && \
    npm cache clean --force

COPY --chown=appuser:nodejs frontend/ .
RUN test -f next.config.js || echo "module.exports = { output: 'standalone' }" > next.config.js && \
    npm run type-check || echo "Type checking failed, continuing..." && \
    npm run lint || echo "Linting failed, continuing..." && \
    npm run build && \
    npm prune --production

# Production stage - combine everything
FROM base AS production
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false

# Set up application structure
WORKDIR /app

# Copy backend application
COPY --from=backend-deps --chown=appuser:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder --chown=appuser:nodejs /app/backend/dist ./backend/dist
COPY --from=backend-builder --chown=appuser:nodejs /app/backend/prisma ./backend/prisma
COPY --from=backend-builder --chown=appuser:nodejs /app/backend/package*.json ./backend/
COPY --chown=appuser:nodejs backend/src ./backend/src
COPY --chown=appuser:nodejs backend/*.js ./backend/

# Copy frontend application
COPY --from=frontend-deps --chown=appuser:nodejs /app/frontend/node_modules ./frontend/node_modules
COPY --from=frontend-builder --chown=appuser:nodejs /app/frontend/.next/standalone ./frontend/
COPY --from=frontend-builder --chown=appuser:nodejs /app/frontend/.next/static ./frontend/.next/static
COPY --from=frontend-builder --chown=appuser:nodejs /app/frontend/public ./frontend/public
COPY --from=frontend-builder --chown=appuser:nodejs /app/frontend/next.config.js ./frontend/

# Create nginx configuration for reverse proxy
RUN cat > /etc/nginx/nginx.conf << 'EOF'
worker_processes auto;
pid /var/run/nginx.pid;
error_log /var/log/nginx/error.log warn;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 16M;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Upstream servers
    upstream backend {
        server 127.0.0.1:3001;
        keepalive 32;
    }

    upstream frontend {
        server 127.0.0.1:3000;
        keepalive 32;
    }

    server {
        listen 80 default_server;
        server_name _;
        server_tokens off;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API routes to backend
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # WebSocket support for real-time features
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 300s;
        }

        # All other routes to frontend
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
    }
}
EOF

# Create supervisor configuration
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:backend]
command=/usr/bin/dumb-init -- node src/index.js
directory=/app/backend
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/backend.err.log
stdout_logfile=/var/log/supervisor/backend.out.log
environment=NODE_ENV=production,PORT=3001

[program:frontend]
command=/usr/bin/dumb-init -- node server.js
directory=/app/frontend
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/frontend.err.log
stdout_logfile=/var/log/supervisor/frontend.out.log
environment=NODE_ENV=production,PORT=3000

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/nginx.err.log
stdout_logfile=/var/log/supervisor/nginx.out.log
EOF

# Create necessary directories with proper permissions
RUN mkdir -p /var/log/supervisor /var/log/nginx /app/logs /app/tmp && \
    chown -R appuser:nodejs /app/logs /app/tmp && \
    chmod 755 /app/logs /app/tmp

# Create startup script
RUN cat > /app/start.sh << 'EOF'
#!/bin/sh
set -e

echo "Starting AI Social Platform..."

# Ensure log directories exist
mkdir -p /var/log/supervisor /var/log/nginx /app/logs

# Initialize database if needed
if [ "$INIT_DB" = "true" ]; then
    echo "Initializing database..."
    cd /app/backend && npx prisma migrate deploy
fi

# Start supervisor to manage all services
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /app/start.sh

# Expose port
EXPOSE 80

# Enhanced health check for full-stack deployment
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f -H "User-Agent: Docker-Health-Check" http://localhost:80/health || exit 1

# Start all services with supervisor
CMD ["/app/start.sh"]