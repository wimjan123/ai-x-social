# AI Social Media Platform - Development Environment
# Docker Compose configuration for local development with hot reloading
# Version: 3.8 for modern Docker features

version: '3.8'

services:
  # PostgreSQL 16 Database with Enhanced Configuration
  postgres:
    image: postgres:16-alpine
    container_name: ai-x-social-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_social_db
      POSTGRES_USER: ai_social_user
      POSTGRES_PASSWORD: ai_social_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      # Performance tuning for development
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_WORK_MEM: 4MB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_social_user -d ai_social_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 7 for Caching and Sessions with Enhanced Configuration
  redis:
    image: redis:7-alpine
    container_name: ai-x-social-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ai-social-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: redis-server /usr/local/etc/redis/redis.conf
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Service (Node.js 22 + Express + Prisma)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ai-x-social-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://ai_social_user:ai_social_dev_password@postgres:5432/ai_social_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      CORS_ORIGIN: https://x.polibase.nl
      # AI Provider Keys (loaded from .env.docker)
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY:-}
      # News API Keys
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      GUARDIAN_API_KEY: ${GUARDIAN_API_KEY:-}
      GNEWS_API_KEY: ${GNEWS_API_KEY:-}
      # Development settings
      LOG_LEVEL: debug
      ENABLE_API_DOCS: true
      PRISMA_SCHEMA_PATH: /app/prisma/schema.prisma
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
      - ./backend/logs:/app/logs
    networks:
      - ai-social-network
      - traefik_traefik-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: node simple-backend.js
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-social-api.rule=Host(`x.polibase.nl`) && PathPrefix(`/api`)"
      - "traefik.http.routers.ai-social-api.entrypoints=websecure"
      - "traefik.http.routers.ai-social-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.ai-social-api.loadbalancer.server.port=3001"
      - "traefik.docker.network=traefik_traefik-network"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Service (Next.js 15 + React 19 + Chakra UI)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ai-x-social-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: https://x.polibase.nl/api
      NEXT_PUBLIC_WS_URL: wss://x.polibase.nl/api
      NEXTAUTH_URL: https://x.polibase.nl
      NEXTAUTH_SECRET: dev-nextauth-secret-change-in-production
      DATABASE_URL: postgresql://ai_social_user:ai_social_dev_password@postgres:5432/ai_social_db
      # Next.js 15 specific settings
      NEXT_TELEMETRY_DISABLED: 1
      FAST_REFRESH: true
      # Development optimizations
      WATCHPACK_POLLING: true
      CHOKIDAR_USEPOLLING: true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - /app/.cache
    networks:
      - ai-social-network
      - traefik_traefik-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: npm run dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-social-frontend.rule=Host(`x.polibase.nl`)"
      - "traefik.http.routers.ai-social-frontend.entrypoints=websecure"
      - "traefik.http.routers.ai-social-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.ai-social-frontend.loadbalancer.server.port=3000"
      - "traefik.docker.network=traefik_traefik-network"
      - "traefik.http.routers.ai-social-frontend.priority=1"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Development Database Admin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_social_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ai-social.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ai_social_network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai_social_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - ai_social_network
    depends_on:
      - redis
    profiles:
      - tools

  # Development Tools Container (optional)
  devtools:
    image: node:22-alpine
    container_name: ai-x-social-devtools
    working_dir: /workspace
    volumes:
      - .:/workspace
      - /workspace/node_modules
    networks:
      - ai-social-network
    profiles:
      - tools
    command: tail -f /dev/null

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
    name: ai-social-postgres-data
  redis_data:
    driver: local
    name: ai-social-redis-data
  pgadmin_data:
    driver: local
    name: ai-social-pgadmin-data

# Custom Network for Service Communication
networks:
  ai-social-network:
    driver: bridge
    name: ai-social-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
  traefik_traefik-network:
    external: true
