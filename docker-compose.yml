version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ai_social_postgres
    environment:
      POSTGRES_DB: ai_social
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - ai_social_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_social"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai_social_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_social_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: ai_social_backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ai_social
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev_jwt_secret_change_in_production
      AI_CLAUDE_API_KEY: ${AI_CLAUDE_API_KEY}
      AI_OPENAI_API_KEY: ${AI_OPENAI_API_KEY}
      AI_GEMINI_API_KEY: ${AI_GEMINI_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      GUARDIAN_API_KEY: ${GUARDIAN_API_KEY}
      GNEWS_API_KEY: ${GNEWS_API_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    networks:
      - ai_social_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: ai_social_frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev_nextauth_secret_change_in_production
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - ai_social_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Development Database Admin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_social_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ai-social.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ai_social_network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai_social_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - ai_social_network
    depends_on:
      - redis
    profiles:
      - tools

networks:
  ai_social_network:
    driver: bridge
    name: ai_social_network

volumes:
  postgres_data:
    name: ai_social_postgres_data
  redis_data:
    name: ai_social_redis_data
  pgadmin_data:
    name: ai_social_pgadmin_data