# AI Social Media Platform - Frontend Development Dockerfile
# Multi-stage Docker build for Next.js 15 + React 19 + TypeScript
# Optimized for development with hot reloading and fast refresh

# =============================================================================
# Base Stage - Common dependencies
# =============================================================================
FROM node:22-alpine AS base

# Set working directory
WORKDIR /app

# Install system dependencies for native modules and image optimization
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    curl \
    git

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nextjs

# =============================================================================
# Dependencies Stage - Install and cache dependencies
# =============================================================================
FROM base AS deps

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY next.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Install dependencies with clean npm cache
RUN npm ci && npm cache clean --force

# =============================================================================
# Development Stage - Hot reloading setup
# =============================================================================
FROM base AS development

# Copy installed dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy configuration files
COPY next.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./
COPY tsconfig.json ./
COPY .eslintrc.json ./
COPY .env.local ./

# Copy source code
COPY . .

# Set environment variables for development
ENV NODE_ENV=development
ENV PORT=3000
ENV NEXT_TELEMETRY_DISABLED=1
ENV FAST_REFRESH=true
ENV WATCHPACK_POLLING=true
ENV CHOKIDAR_USEPOLLING=true

# Generate Prisma client (for frontend API routes)
RUN npx prisma generate --schema=../backend/prisma/schema.prisma || echo "Prisma schema not found, skipping generation"

# Create cache directories
RUN mkdir -p .next/cache && \
    chown -R nodejs:nodejs .next && \
    chmod 755 .next

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Development command with hot reloading
CMD ["npm", "run", "dev"]

# =============================================================================
# Build Stage - Next.js compilation and optimization
# =============================================================================
FROM base AS builder

# Copy dependencies and source code
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set environment for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build arguments for client-side environment variables
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_WS_URL

ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_WS_URL=$NEXT_PUBLIC_WS_URL

# Generate Prisma client if schema exists
RUN npx prisma generate --schema=../backend/prisma/schema.prisma || echo "Prisma schema not found, skipping generation"

# Build Next.js application
RUN npm run build

# =============================================================================
# Production Stage - Optimized runtime
# =============================================================================
FROM node:22-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    dumb-init

# Create user and directories
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nextjs

WORKDIR /app

# Copy production dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./

# Set production environment
ENV NODE_ENV=production
ENV PORT=3000
ENV NEXT_TELEMETRY_DISABLED=1

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Production command
CMD ["npm", "start"]

# =============================================================================
# Docker Build Arguments and Labels
# =============================================================================

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Metadata labels
LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.url="https://github.com/ai-x-social/ai-x-social" \
      org.opencontainers.image.source="https://github.com/ai-x-social/ai-x-social" \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.vendor="AI X Social Team" \
      org.opencontainers.image.title="AI Social Media Platform - Frontend" \
      org.opencontainers.image.description="Next.js frontend for AI-powered social media platform" \
      org.opencontainers.image.licenses="MIT"