# Production Environment Configuration for AI Social Media Platform
# Copy this file to .env.production and customize the values

# =============================================================================
# REQUIRED SETTINGS - Must be configured before deployment
# =============================================================================

# Database Configuration
POSTGRES_DB=aisocial
POSTGRES_USER=aisocial
POSTGRES_PASSWORD=your-secure-database-password-here
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

# Security Keys (Generate secure random strings)
JWT_SECRET=your-jwt-secret-must-be-at-least-32-characters-long
NEXTAUTH_SECRET=your-nextauth-secret-must-be-at-least-32-characters-long
NEXTAUTH_URL=https://your-domain.com

# =============================================================================
# AI PROVIDER CONFIGURATION - Configure at least one provider
# =============================================================================

# Anthropic (Claude) - Recommended primary provider
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here

# OpenAI (GPT) - Fallback provider
OPENAI_API_KEY=sk-your-openai-api-key-here

# Google AI (Gemini) - Additional fallback
GOOGLE_AI_API_KEY=your-google-ai-api-key-here

# =============================================================================
# NEWS API CONFIGURATION - Configure for news integration
# =============================================================================

# NewsAPI.org - Primary news source
NEWS_API_KEY=your-newsapi-key-here

# The Guardian API - Additional news source
GUARDIAN_API_KEY=your-guardian-api-key-here

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

REDIS_URL=redis://redis:6379
REDIS_PASSWORD=
REDIS_DB=0

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Environment
NODE_ENV=production
PORT=3000
API_PORT=3001

# Next.js Configuration
NEXT_TELEMETRY_DISABLED=1
NEXT_OPTIMIZE=1

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CORS Origins (comma-separated)
CORS_ORIGINS=https://your-domain.com,https://www.your-domain.com

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Session Configuration
SESSION_TIMEOUT=3600000
MAX_SESSIONS_PER_USER=5

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# AI Features
ENABLE_AI_PERSONAS=true
ENABLE_AI_CONTENT_GENERATION=true
ENABLE_AI_MODERATION=true

# Social Features
ENABLE_REAL_TIME_UPDATES=true
ENABLE_NOTIFICATIONS=true
ENABLE_FILE_UPLOADS=true

# News Integration
ENABLE_NEWS_AGGREGATION=true
ENABLE_NEWS_AI_ANALYSIS=true

# =============================================================================
# MONITORING AND LOGGING
# =============================================================================

# Logging Level (error, warn, info, debug)
LOG_LEVEL=info
LOG_FORMAT=json

# Metrics and Monitoring
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true

# Error Tracking (optional)
SENTRY_DSN=
SENTRY_ENVIRONMENT=production

# =============================================================================
# EXTERNAL SERVICES (OPTIONAL)
# =============================================================================

# Email Service (for notifications)
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=noreply@your-domain.com

# Cloud Storage (for file uploads)
AWS_REGION=us-east-1
AWS_S3_BUCKET=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

# CDN Configuration
CDN_URL=

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Database Backup
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30
BACKUP_S3_BUCKET=

# =============================================================================
# SSL/TLS CONFIGURATION
# =============================================================================

# SSL Certificates (if using HTTPS)
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# Node.js Memory Settings
NODE_OPTIONS=--max-old-space-size=1024

# Database Connection Pool
DATABASE_CONNECTION_POOL_SIZE=10
DATABASE_CONNECTION_TIMEOUT=30000

# Redis Connection Settings
REDIS_CONNECTION_POOL_SIZE=10
REDIS_CONNECTION_TIMEOUT=5000

# =============================================================================
# DEVELOPMENT OVERRIDES (DO NOT USE IN PRODUCTION)
# =============================================================================

# Development Database (leave empty for production)
DEV_DATABASE_URL=

# Debug Settings (leave empty for production)
DEBUG=
VERBOSE_LOGGING=

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. JWT_SECRET and NEXTAUTH_SECRET must be at least 32 characters long
# 2. Use strong, unique passwords for POSTGRES_PASSWORD
# 3. Keep API keys secure and rotate them regularly
# 4. Enable HTTPS in production
# 5. Configure CORS_ORIGINS to match your domain(s)
# 6. Regular security updates and monitoring
# 7. Use environment-specific secrets management in production

# =============================================================================
# QUICK SETUP COMMANDS
# =============================================================================

# Generate secure JWT secret:
# openssl rand -base64 32

# Generate secure NEXTAUTH secret:
# openssl rand -base64 32

# Generate secure database password:
# openssl rand -base64 16

# Test database connection:
# docker-compose exec postgres pg_isready -U aisocial

# Check application health:
# curl http://localhost/health