# AI Social Media Platform - Docker Environment Variables
# Copy this file to .env.docker.local and customize for your environment
# This file contains Docker-specific configuration for both development and production

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Configuration
POSTGRES_DB=ai_social_db
POSTGRES_USER=ai_social_user
POSTGRES_PASSWORD=ai_social_dev_password
POSTGRES_PORT=5432

# Production Database Configuration (override in production)
# POSTGRES_PASSWORD=CHANGE_ME_IN_PRODUCTION
# POSTGRES_USER=ai_social_prod_user

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================

# Redis Configuration
REDIS_PORT=6379
REDIS_PASSWORD=

# Production Redis Configuration (override in production)
# REDIS_PASSWORD=CHANGE_ME_IN_PRODUCTION

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================

# JWT and Authentication
JWT_SECRET=dev-jwt-secret-change-in-production-to-long-random-string
NEXTAUTH_SECRET=dev-nextauth-secret-change-in-production-to-long-random-string
NEXTAUTH_URL=http://localhost:3000

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# API URLs for Frontend
NEXT_PUBLIC_API_URL=http://localhost:3001
NEXT_PUBLIC_WS_URL=ws://localhost:3001

# Application Ports
FRONTEND_PORT=3000
BACKEND_PORT=3001
HTTP_PORT=80
HTTPS_PORT=443

# ============================================================================
# AI PROVIDER API KEYS
# ============================================================================

# Anthropic Claude API
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# OpenAI API
OPENAI_API_KEY=your_openai_api_key_here

# Google AI (Gemini) API
GOOGLE_AI_API_KEY=your_google_ai_api_key_here

# ============================================================================
# NEWS API KEYS
# ============================================================================

# NewsAPI.org
NEWS_API_KEY=your_newsapi_key_here

# The Guardian API
GUARDIAN_API_KEY=your_guardian_api_key_here

# GNews API
GNEWS_API_KEY=your_gnews_api_key_here

# ============================================================================
# PRODUCTION CONFIGURATION
# ============================================================================

# Logging Configuration
LOG_LEVEL=debug

# API Documentation (disable in production)
ENABLE_API_DOCS=true

# Rate Limiting
MAX_REQUESTS_PER_MINUTE=100

# Backup Configuration
BACKUP_SCHEDULE=0 2 * * *

# Monitoring Ports (for production)
PROMETHEUS_PORT=9090
GRAFANA_PORT=3002
GRAFANA_ADMIN_PASSWORD=change_me_in_production

# ============================================================================
# DEVELOPMENT OVERRIDES
# ============================================================================

# Development-specific settings (these override above for dev environment)
NODE_ENV=development
NEXT_TELEMETRY_DISABLED=1
FAST_REFRESH=true
WATCHPACK_POLLING=true
CHOKIDAR_USEPOLLING=true

# ============================================================================
# PRODUCTION SECURITY OVERRIDES
# ============================================================================
# These should be set in production environment or CI/CD pipeline
# Never commit production secrets to version control

# Production Database URL (alternative to individual DB vars)
# DATABASE_URL=postgresql://username:password@host:port/database

# Production Redis URL (alternative to individual Redis vars)
# REDIS_URL=redis://username:password@host:port

# SSL Configuration for Production
# SSL_CERT_PATH=/etc/ssl/certs/certificate.crt
# SSL_KEY_PATH=/etc/ssl/private/private.key

# External Service URLs (for production)
# EXTERNAL_API_BASE_URL=https://api.your-domain.com
# CDN_BASE_URL=https://cdn.your-domain.com

# ============================================================================
# DOCKER-SPECIFIC CONFIGURATION
# ============================================================================

# Docker Compose Configuration
COMPOSE_PROJECT_NAME=ai-x-social
COMPOSE_FILE=docker-compose.yml

# Development Tools (set to true to enable)
ENABLE_PGADMIN=false
ENABLE_REDIS_COMMANDER=false
ENABLE_DEVTOOLS=false

# Resource Limits (production)
POSTGRES_MEMORY_LIMIT=2G
POSTGRES_CPU_LIMIT=1.0
REDIS_MEMORY_LIMIT=1G
REDIS_CPU_LIMIT=0.5
BACKEND_MEMORY_LIMIT=1G
BACKEND_CPU_LIMIT=1.0
FRONTEND_MEMORY_LIMIT=512M
FRONTEND_CPU_LIMIT=0.5

# Volume Configuration
POSTGRES_DATA_VOLUME=ai-social-postgres-data
REDIS_DATA_VOLUME=ai-social-redis-data
BACKUP_VOLUME=ai-social-postgres-backups

# Network Configuration
DOCKER_NETWORK_SUBNET=172.20.0.0/16
PROD_NETWORK_SUBNET=172.21.0.0/16