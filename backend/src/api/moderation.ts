/**
 * Content Moderation API Endpoints
 * Handles content reporting, moderation status, and admin controls
 */

import express from 'express';
import { z } from 'zod';
import { contentModerationService } from '@/services/ContentModerationService';
import { handleContentReport } from '@/lib/middleware/moderationMiddleware';
import { authenticateUser } from '@/lib/middleware/auth';
import { logger } from '@/lib/logger';
import { ApiResponse } from '@/lib/types';

const router = express.Router();

// Request validation schemas
const reportContentSchema = z.object({
  contentId: z.string().min(1, 'Content ID is required'),
  reason: z.string().min(1, 'Reason is required').max(500, 'Reason too long'),
  category: z.enum(['spam', 'harassment', 'hate_speech', 'violence', 'misinformation', 'inappropriate', 'other']),
  additionalInfo: z.string().optional()
});\n\nconst moderateContentSchema = z.object({\n  text: z.string().min(1, 'Text is required').max(10000, 'Text too long'),\n  context: z.object({\n    authorId: z.string().optional(),\n    postType: z.string().optional()\n  }).optional()\n});\n\n/**\n * POST /api/moderation/report\n * Submit a content report\n */\nrouter.post('/report', authenticateUser, async (req, res) => {\n  try {\n    const validatedData = reportContentSchema.parse(req.body);\n    const reporterId = req.user!.id;\n\n    await contentModerationService.reportContent(\n      validatedData.contentId,\n      reporterId,\n      validatedData.reason,\n      validatedData.category\n    );\n\n    const response: ApiResponse = {\n      success: true,\n      data: {\n        message: 'Content report submitted successfully',\n        reportId: `report_${Date.now()}`,\n        status: 'pending'\n      }\n    };\n\n    logger.info('Content report submitted', {\n      contentId: validatedData.contentId,\n      reporterId,\n      category: validatedData.category,\n      requestId: res.locals?.requestId\n    });\n\n    res.status(200).json(response);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const response: ApiResponse = {\n        success: false,\n        error: 'Invalid request data',\n        data: error.errors\n      };\n      return res.status(400).json(response);\n    }\n\n    logger.error('Content reporting failed:', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      reporterId: req.user?.id,\n      requestId: res.locals?.requestId\n    });\n\n    const response: ApiResponse = {\n      success: false,\n      error: 'Failed to submit content report',\n      data: null\n    };\n\n    res.status(500).json(response);\n  }\n});\n\n/**\n * POST /api/moderation/analyze\n * Analyze content for moderation (for testing/preview)\n */\nrouter.post('/analyze', authenticateUser, async (req, res) => {\n  try {\n    const validatedData = moderateContentSchema.parse(req.body);\n\n    const moderationResult = await contentModerationService.moderateContent({\n      text: validatedData.text,\n      metadata: {\n        authorId: validatedData.context?.authorId || req.user!.id,\n        postType: validatedData.context?.postType || 'preview',\n        timestamp: new Date().toISOString()\n      }\n    });\n\n    const response: ApiResponse = {\n      success: true,\n      data: {\n        moderation: {\n          isBlocked: moderationResult.isBlocked,\n          confidence: moderationResult.confidence,\n          severity: moderationResult.severity,\n          suggestedAction: moderationResult.suggestedAction,\n          categories: moderationResult.categories,\n          // Don't include specific reasons in public API for security\n          hasIssues: moderationResult.reasons.length > 0\n        },\n        message: moderationResult.isBlocked\n          ? 'Content violates community guidelines'\n          : 'Content appears to be acceptable'\n      }\n    };\n\n    res.status(200).json(response);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const response: ApiResponse = {\n        success: false,\n        error: 'Invalid request data',\n        data: error.errors\n      };\n      return res.status(400).json(response);\n    }\n\n    logger.error('Content analysis failed:', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      userId: req.user?.id,\n      requestId: res.locals?.requestId\n    });\n\n    const response: ApiResponse = {\n      success: false,\n      error: 'Failed to analyze content',\n      data: null\n    };\n\n    res.status(500).json(response);\n  }\n});\n\n/**\n * GET /api/moderation/stats\n * Get moderation statistics (admin only)\n */\nrouter.get('/stats', authenticateUser, async (req, res) => {\n  try {\n    // TODO: Add admin role check\n    // For now, any authenticated user can see basic stats\n\n    const stats = await contentModerationService.getModerationStats();\n\n    const response: ApiResponse = {\n      success: true,\n      data: {\n        moderation: {\n          totalReports: stats.totalReports,\n          pendingReports: stats.pendingReports,\n          blockedContent: stats.blockedContent,\n          flaggedContent: stats.flaggedContent\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    res.status(200).json(response);\n  } catch (error) {\n    logger.error('Failed to get moderation stats:', {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      userId: req.user?.id,\n      requestId: res.locals?.requestId\n    });\n\n    const response: ApiResponse = {\n      success: false,\n      error: 'Failed to retrieve moderation statistics',\n      data: null\n    };\n\n    res.status(500).json(response);\n  }\n});\n\n/**\n * GET /api/moderation/categories\n * Get available report categories\n */\nrouter.get('/categories', (req, res) => {\n  const response: ApiResponse = {\n    success: true,\n    data: {\n      categories: [\n        { id: 'spam', label: 'Spam or advertising', description: 'Unwanted promotional content' },\n        { id: 'harassment', label: 'Harassment or bullying', description: 'Content that harasses or bullies individuals' },\n        { id: 'hate_speech', label: 'Hate speech', description: 'Content promoting hatred against groups' },\n        { id: 'violence', label: 'Violence or threats', description: 'Content containing violent threats or imagery' },\n        { id: 'misinformation', label: 'Misinformation', description: 'False or misleading information' },\n        { id: 'inappropriate', label: 'Inappropriate content', description: 'Content not suitable for the platform' },\n        { id: 'other', label: 'Other', description: 'Other community guideline violations' }\n      ]\n    }\n  };\n\n  res.status(200).json(response);\n});\n\n/**\n * GET /api/moderation/guidelines\n * Get community guidelines\n */\nrouter.get('/guidelines', (req, res) => {\n  const response: ApiResponse = {\n    success: true,\n    data: {\n      guidelines: {\n        title: 'Community Guidelines',\n        version: '1.0',\n        lastUpdated: '2025-09-16',\n        rules: [\n          {\n            id: 'respect',\n            title: 'Be respectful',\n            description: 'Treat all users with respect and dignity. Harassment, bullying, and personal attacks are not allowed.'\n          },\n          {\n            id: 'no_hate',\n            title: 'No hate speech',\n            description: 'Content promoting hatred, discrimination, or violence against individuals or groups is prohibited.'\n          },\n          {\n            id: 'no_spam',\n            title: 'No spam',\n            description: 'Avoid posting repetitive content, excessive advertising, or irrelevant material.'\n          },\n          {\n            id: 'no_violence',\n            title: 'No violence or threats',\n            description: 'Threats of violence, graphic violent content, and incitement to violence are not permitted.'\n          },\n          {\n            id: 'accurate_info',\n            title: 'Share accurate information',\n            description: 'Avoid spreading misinformation or deliberately false content.'\n          },\n          {\n            id: 'appropriate_content',\n            title: 'Keep content appropriate',\n            description: 'Content should be suitable for a diverse audience and align with our community standards.'\n          }\n        ]\n      }\n    }\n  };\n\n  res.status(200).json(response);\n});\n\nexport default router;