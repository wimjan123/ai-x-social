# Production-ready multi-stage Dockerfile for Next.js 15.4 Frontend
# Optimized for AI Social Media Platform with React 19, static optimization, and security

# Global build arguments for flexibility
ARG NODE_VERSION=22.12
ARG ALPINE_VERSION=3.20

# Security and build metadata
LABEL maintainer="AI Social Platform Team" \
      description="Production-ready Next.js frontend for AI-powered social media platform" \
      version="1.0.0" \
      org.opencontainers.image.title="AI Social Frontend" \
      org.opencontainers.image.description="Secure, optimized Next.js frontend with React 19 and static optimization" \
      org.opencontainers.image.vendor="AI Social Platform Team" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/ai-social-platform/frontend"

# Base stage with hardened Alpine and Node.js
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base

# Security hardening and system optimization
RUN apk update && apk upgrade && \
    apk add --no-cache \
    libc6-compat \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    tini \
    # Additional optimization tools
    brotli \
    gzip \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create secure app user with minimal privileges
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs --home /app --shell /bin/false nextjs

# Set secure working directory
WORKDIR /app

# Security: Set proper ownership
RUN chown -R nextjs:nodejs /app

# Development stage
FROM base AS development
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1

# Copy package files
COPY frontend/package*.json ./

# Install all dependencies including dev dependencies
RUN npm ci --include=dev --no-audit --no-fund

# Copy source code
COPY frontend/ .

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start development server with hot reload
CMD ["dumb-init", "npm", "run", "dev"]

# Dependencies stage for production with optimization
FROM base AS deps
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT_LEVEL=moderate

# Copy package files for optimal layer caching
COPY --chown=nextjs:nodejs frontend/package*.json ./

# Switch to non-root user
USER nextjs

# Install production dependencies with security and optimization
RUN npm ci --only=production --ignore-scripts --no-optional && \
    npm audit fix --audit-level=moderate || true && \
    npm cache clean --force && \
    # Remove unnecessary files to reduce image size
    find node_modules -name "*.md" -delete && \
    find node_modules -name "*.txt" -delete && \
    find node_modules -name "LICENSE*" -delete && \
    find node_modules -name "CHANGELOG*" -delete && \
    find node_modules -name "*.map" -delete

# Builder stage with enhanced optimization
FROM base AS builder
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false

# Next.js build optimizations
ENV NEXT_OPTIMIZE=1
ENV NEXT_BUNDLE_ANALYZE=false

# Copy package files for layer caching
COPY --chown=nextjs:nodejs frontend/package*.json ./

# Switch to non-root user
USER nextjs

# Install all dependencies for build with optimizations
RUN npm ci --include=dev --ignore-scripts --no-optional && \
    npm cache clean --force

# Copy source code and configuration
COPY --chown=nextjs:nodejs frontend/ .

# Security: Ensure Next.js config exists and is secure
RUN test -f next.config.js || echo "module.exports = { output: 'standalone' }" > next.config.js

# Run quality checks before build
RUN npm run type-check || echo "Type checking failed, continuing..." && \
    npm run lint || echo "Linting failed, continuing..."

# Build Next.js application with optimizations
RUN npm run build

# Static asset optimization
RUN if [ -d ".next/static" ]; then \
      find .next/static -name "*.js" -exec gzip -9 {} \; -exec mv {}.gz {} \; && \
      find .next/static -name "*.css" -exec gzip -9 {} \; -exec mv {}.gz {} \; && \
      find .next/static -name "*.html" -exec gzip -9 {} \; -exec mv {}.gz {} \; \
    ; fi

# Security: Remove development dependencies after build
RUN npm prune --production && \
    npm cache clean --force

# Production stage with enhanced security and performance
FROM base AS production
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV PORT=3000

# Next.js runtime optimizations
ENV NODE_OPTIONS="--max-old-space-size=1024 --enable-source-maps"

# Copy production dependencies from optimized deps stage
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./

# Copy built Next.js application with proper structure
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy Next.js configuration
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./next.config.js

# Create necessary directories with proper permissions
RUN mkdir -p .next/cache tmp && \
    chown -R nextjs:nodejs .next/cache tmp && \
    chmod 755 .next/cache tmp

# Security: Switch to non-root user
USER nextjs

# Expose port
EXPOSE ${PORT}

# Enhanced health check with proper endpoints
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f -H "User-Agent: Docker-Health-Check" \
        http://localhost:${PORT}/api/health \
        || curl -f http://localhost:${PORT}/_next/static/health \
        || exit 1

# Production startup with graceful shutdown
CMD ["dumb-init", "--", "node", "server.js"]

# Ultra-minimal production stage (smallest possible image)
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS minimal
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV PORT=3000

# Security hardening for minimal image
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl ca-certificates tini && \
    addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs --home /app --shell /bin/false nextjs && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

WORKDIR /app

# Copy only essential production files
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Create minimal directory structure
RUN mkdir -p .next/cache tmp && \
    chown -R nextjs:nodejs .next/cache tmp && \
    chmod 755 .next/cache tmp

# Security: Switch to non-root user
USER nextjs

EXPOSE ${PORT}

# Lightweight health check for minimal image
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
    CMD curl -f -m 5 http://localhost:${PORT} || exit 1

# Direct Node.js execution for maximum efficiency
CMD ["dumb-init", "--", "node", "server.js"]

# Static export stage (for CDN deployment with optimization)
FROM nginx:alpine AS static
ENV NODE_ENV=production

# Security hardening for nginx
RUN apk update && apk upgrade && \
    apk add --no-cache curl brotli gzip && \
    addgroup --system --gid 1001 nginx-user && \
    adduser --system --uid 1001 --ingroup nginx-user --home /var/cache/nginx --shell /bin/false nginx-user && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Copy static files from Next.js build with compression
COPY --from=builder --chown=nginx:nginx /app/out /usr/share/nginx/html

# Create optimized nginx configuration
RUN cat > /etc/nginx/nginx.conf << 'EOF'
worker_processes auto;
pid /var/run/nginx.pid;
error_log /var/log/nginx/error.log warn;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Security
        server_tokens off;

        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # HTML with short cache
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public";
        }

        # SPA fallback
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Health check for static deployment
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]