# Multi-stage Dockerfile for Next.js 15.4 Frontend
# Optimized for AI Social Media Platform with React 19

# Base stage with Node.js 22
FROM node:22-alpine AS base
LABEL maintainer="AI Social Platform Team"
LABEL description="Next.js frontend for AI-powered social media platform"

# Install system dependencies and security updates
RUN apk add --no-cache \
    libc6-compat \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    && apk upgrade \
    && rm -rf /var/cache/apk/*

# Create app user for security
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 --ingroup nodejs nextjs

# Set working directory
WORKDIR /app

# Development stage
FROM base AS development
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1

# Copy package files
COPY frontend/package*.json ./

# Install all dependencies including dev dependencies
RUN npm ci --include=dev --no-audit --no-fund

# Copy source code
COPY frontend/ .

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start development server with hot reload
CMD ["dumb-init", "npm", "run", "dev"]

# Dependencies stage for production
FROM base AS deps
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install production dependencies
RUN npm ci --only=production --no-audit --no-fund && npm cache clean --force

# Builder stage
FROM base AS builder
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install all dependencies for build
RUN npm ci --include=dev --no-audit --no-fund

# Copy source code
COPY frontend/ .

# Build Next.js application
RUN npm run build

# Production stage
FROM base AS production
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# Copy production dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./

# Copy built Next.js application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Production startup
CMD ["dumb-init", "node", "server.js"]

# Minimal production stage (for smallest image size)
FROM node:22-alpine AS minimal
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Install minimal runtime dependencies
RUN apk add --no-cache dumb-init curl ca-certificates \
    && addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 --ingroup nodejs nextjs

WORKDIR /app

# Copy only essential production files
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

USER nextjs
EXPOSE 3000

HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
    CMD curl -f http://localhost:3000 || exit 1

CMD ["dumb-init", "node", "server.js"]

# Static export stage (for CDN deployment)
FROM nginx:alpine AS static
ENV NODE_ENV=production

# Copy static files from Next.js build
COPY --from=builder /app/out /usr/share/nginx/html

# Copy custom nginx configuration
COPY frontend/nginx.conf /etc/nginx/nginx.conf 2>/dev/null || echo "No custom nginx.conf found"

# Health check for static deployment
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]